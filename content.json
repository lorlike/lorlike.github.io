{"pages":[{"title":"about","text":"一个蒟蒻菜鸡记录笔记的地方，希望也能够帮到你 关于我 ID: Lorlike, L 啥都沾点，啥都不会，目前主要在ctf的密码方向","link":"/about/index.html"}],"posts":[{"title":"2022 D^3ctf密码题赛后复现(ing)","text":"d3factor方法1造格子设$\\epsilon=d_2-d_1$，有$e_1e_2\\epsilon +e_2-e_1\\equiv0\\ mod\\ p^6$化为$\\epsilon+b=kp^6,\\ b\\equiv(e_1e_2)^{-1}(e_2-e_1)\\ mod\\ p^6$设$M=N^{\\frac{1}{2}}$，$L=\\begin{pmatrix}M&amp;b\\\\ 0&amp;N\\end{pmatrix}$$(pq\\ -k)L=(pqM\\ -pq\\epsilon)$ 1234567891011121314import gmpy2c = 2420624631315473673388732074340410215657378096737020976722603529598864338532404224879219059105950005655100728361198499550862405660043591919681568611707967N = 1476751427633071977599571983301151063258376731102955975364111147037204614220376883752032253407881568290520059515340434632858734689439268479399482315506043425541162646523388437842149125178447800616137044219916586942207838674001004007237861470176454543718752182312318068466051713087927370670177514666860822341380494154077020472814706123209865769048722380888175401791873273850281384147394075054950169002165357490796510950852631287689747360436384163758289159710264469722036320819123313773301072777844457895388797742631541101152819089150281489897683508400098693808473542212963868834485233858128220055727804326451310080791e1 = 425735006018518321920113858371691046233291394270779139216531379266829453665704656868245884309574741300746121946724344532456337490492263690989727904837374279175606623404025598533405400677329916633307585813849635071097268989906426771864410852556381279117588496262787146588414873723983855041415476840445850171457530977221981125006107741100779529209163446405585696682186452013669643507275620439492021019544922913941472624874102604249376990616323884331293660116156782891935217575308895791623826306100692059131945495084654854521834016181452508329430102813663713333608459898915361745215871305547069325129687311358338082029e2 = 1004512650658647383814190582513307789549094672255033373245432814519573537648997991452158231923692387604945039180687417026069655569594454408690445879849410118502279459189421806132654131287284719070037134752526923855821229397612868419416851456578505341237256609343187666849045678291935806441844686439591365338539029504178066823886051731466788474438373839803448380498800384597878814991008672054436093542513518012957106825842251155935855375353004898840663429274565622024673235081082222394015174831078190299524112112571718817712276118850981261489528540025810396786605197437842655180663611669918785635193552649262904644919b=inverse_mod(e1*e2,N)*(e2-e1)%NM=floor(N^(1/2))A=matrix(ZZ,[[M,b],[0,N]])pq=abs(A.LLL()[0][0])//Mp6=N//pqp=gmpy2.gcd(p6,pq)q=pq//pprint(p,q) 解出flag 12345678910111213from Crypto.Util.number import *from hashlib import md5c = 2420624631315473673388732074340410215657378096737020976722603529598864338532404224879219059105950005655100728361198499550862405660043591919681568611707967p=81911394167511996830305370213894554209992159667974516868378702592733037962549q=59689394622751323780317475130818337618980301243859922297121750335804594909859n=p*qphi=pow(p,6)*(p-1)*(q-1)d=inverse(0x10001,phi)msg=long_to_bytes(pow(c,d,n))flag = 'd3ctf{'+md5(msg).hexdigest()+'}'print(flag) 方法2直接上coppersmith梭$e_1e_2\\epsilon +e_2-e_1\\equiv0\\ mod\\ p^6$$b=p^6\\ge N^\\beta$得到$\\beta=$0.75 12345678910111213141516171819202122import gmpy2from hashlib import md5c = 2420624631315473673388732074340410215657378096737020976722603529598864338532404224879219059105950005655100728361198499550862405660043591919681568611707967N = 1476751427633071977599571983301151063258376731102955975364111147037204614220376883752032253407881568290520059515340434632858734689439268479399482315506043425541162646523388437842149125178447800616137044219916586942207838674001004007237861470176454543718752182312318068466051713087927370670177514666860822341380494154077020472814706123209865769048722380888175401791873273850281384147394075054950169002165357490796510950852631287689747360436384163758289159710264469722036320819123313773301072777844457895388797742631541101152819089150281489897683508400098693808473542212963868834485233858128220055727804326451310080791e1 = 425735006018518321920113858371691046233291394270779139216531379266829453665704656868245884309574741300746121946724344532456337490492263690989727904837374279175606623404025598533405400677329916633307585813849635071097268989906426771864410852556381279117588496262787146588414873723983855041415476840445850171457530977221981125006107741100779529209163446405585696682186452013669643507275620439492021019544922913941472624874102604249376990616323884331293660116156782891935217575308895791623826306100692059131945495084654854521834016181452508329430102813663713333608459898915361745215871305547069325129687311358338082029e2 = 1004512650658647383814190582513307789549094672255033373245432814519573537648997991452158231923692387604945039180687417026069655569594454408690445879849410118502279459189421806132654131287284719070037134752526923855821229397612868419416851456578505341237256609343187666849045678291935806441844686439591365338539029504178066823886051731466788474438373839803448380498800384597878814991008672054436093542513518012957106825842251155935855375353004898840663429274565622024673235081082222394015174831078190299524112112571718817712276118850981261489528540025810396786605197437842655180663611669918785635193552649262904644919P.&lt;x&gt;=PolynomialRing(Zmod(N))f=e1*e2*x+e2-e1f=f.monic()res=f.small_roots(X=2^1000,beta=0.75)[0]p6=gmpy2.gcd(int(f(res)),N)n=N//p6p=gmpy2.gcd(p6,n)q=n//pn=p*qphi=pow(p,6)*(p-1)*(q-1)d=inverse_mod(0x10001,phi)msg=bytes.fromhex(hex(gmpy2.powmod(c,d,n))[2:])print(msg)flag = 'd3ctf{'+md5(msg).hexdigest()+'}'print(flag) d3qcg多元coppersmith$s_1=as^2+c\\ mod\\ p\\ ,\\ s_2=as_1^2+c\\ mod\\ p$$s_1,s_2$高位已知，求出$s_1,s_2$，在有限域求根$s$ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import itertoolsimport hashlibdef small_roots(f, bounds, m=1, d=None): if not d: d = f.degree() R = f.base_ring() N = R.cardinality() f /= f.coefficients().pop(0) f = f.change_ring(ZZ) G = Sequence([], f.parent()) for i in range(m+1): base = N ^ (m-i) * f ^ i for shifts in itertools.product(range(d), repeat=f.nvariables()): g = base * prod(map(power, f.variables(), shifts)) G.append(g) B, monomials = G.coefficient_matrix() monomials = vector(monomials) factors = [monomial(*bounds) for monomial in monomials] for i, factor in enumerate(factors): B.rescale_col(i, factor) B = B.dense_matrix().LLL() B = B.change_ring(QQ) for i, factor in enumerate(factors): B.rescale_col(i, 1/factor) H = Sequence([], f.parent().change_ring(QQ)) for h in filter(None, B*monomials): H.append(h) I = H.ideal() if I.dimension() == -1: H.pop() elif I.dimension() == 0: roots = [] for root in I.variety(ring=ZZ): root = tuple(R(root[var]) for var in f.variables()) roots.append(root) return roots return []d = {'a': 3591518680290719943596137190796366296374484536382380061852237064647969442581391967815457547858969187198898670115651116598727939742165753798804458359397101, 'c': 6996824752943994631802515921125382520044917095172009220000813718617441355767447428067985103926211738826304567400243131010272198095205381950589038817395833, 'p': 7386537185240346459857715381835501419533088465984777861268951891482072249822526223542514664598394978163933836402581547418821954407062640385756448408431347}a, c, p = d['a'], d['c'], d['p']h = [67523583999102391286646648674827012089888650576715333147417362919706349137337570430286202361838682309142789833, 70007105679729967877791601360700732661124470473944792680253826569739619391572400148455527621676313801799318422]enc = 6176615302812247165125832378994890837952704874849571780971393318502417187945089718911116370840334873574762045429920150244413817389304969294624001945527125P. &lt; x, y &gt; = PolynomialRing(GF(p))f = a*(2 ^ 146*h[0]+x) ^ 2+c-(2 ^ 146*h[1]+y)l = small_roots(f, (2 ^ 146, 2 ^ 146), m=4, d=4)assert len(l) &gt; 0l1, l2 = l[0]s1, s2 = 2 ^ 146*h[0]+l1, 2 ^ 146*h[1]+l2P. &lt; z &gt;= PolynomialRing(GF(p))f = a*z ^ 2+c-s1l = [int(i[0]) for i in f.roots()]for i in l: flag = int.from_bytes(hashlib.sha512(b'%d' % (i)).digest(), 'big') ^ ^enc flag = bytes.fromhex(hex(flag)[2:]) if b'd3ctf' in flag: print(flag) 核心代码来自https://github.com/defund/coppersmith d3bug123456789101112131415161718192021222324mask = 0b1010010000001000000010001001010010100100000010000000100010010100A = matrix(GF(2), 70, 64)T1 = matrix(GF(2), 64, 64)T2 = matrix(GF(2), 64, 64)for i in range(63): T1[i, i+1] = 1 T2[i, i+1] = 1T1[-1] = [int(i) for i in bin(mask)[2:]]T2[-1] = [1]*64E1 = T1 ^ 64E2 = T2 ^ 64r1 = '01111101111010111000010010111001101'r2 = '00100110001000110001101010101001001'for i in range(35): A[i] = E1[i] A[i+35] = E2[i]b = [int(i) for i in r1+r2]ans = A.solve_right(b)print(ans)flag = 0for i in ans: flag = (flag &lt;&lt; 1)+int(i)print(bytes.fromhex(hex(flag)[2:]))","link":"/2022/03/08/2022-D3ctf%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/"},{"title":"*CTF 2022 crypto","text":"ezRSA方法1p,q的900位以后的高位hb都是一样的，可以先求出来 设$p=hb+y$，那么$q=hb+2^{900}-y+z$，z为300位的随机数，可以得到$$p+q=2hb+2^{900}+z,\\ p-q=2y-2^{900}-z$$因为$n=pq$，$p+q$的高位（低300位未知）已知，可以由$p-q=\\sqrt{(p+q)^2-4n}$求出$p-q$的近似值相应的y的近似值也能求出，再用coppersmith求出y的低位从而求出p 1234567891011121314151617from Crypto.Util.number import *import gmpy2n=0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3c=0xd7f6c90512bc9494370c3955ff3136bb245a6d1095e43d8636f66f11db525f2063b14b2a4363a96e6eb1bea1e9b2cc62b0cae7659f18f2b8e41fca557281a1e859e8e6b35bd114655b6bf5e454753653309a794fa52ff2e79433ca4bbeb1ab9a78ec49f49ebee2636abd9dd9b80306ae1b87a86c8012211bda88e6e14c58805feb6721a01481d1a7031eb3333375a81858ff3b58d8837c188ffcb982a631e1a7a603b947a6984bd78516c71cfc737aaba479688d56df2c0952deaf496a4eb3f603a46a90efbe9e82a6aef8cfb23e5fcb938c9049b227b7f15c878bd99b61b6c56db7dfff43cd457429d5dcdb5fe314f1cdf317d0c5202bad6a9770076e9b25b1prefix=gmpy2.iroot(n,2)[0]prefix=(prefix&gt;&gt;900)&lt;&lt;900hb=gmpy2.iroot(n,2)[0]hb=(hb&gt;&gt;900)&lt;&lt;900paq=2*hb+2**900psq=gmpy2.iroot(paq**2-4*n,2)[0]y=(psq+2**900)//2p=hb+yprint(p)# 170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371506437683672869879650195774368524468044540434185235653504063937932618450991608706715382905688880285112977572901480973791888259637 1234567891011n=0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3p_=170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371506437683672869879650195774368524468044540434185235653504063937932618450991608706715382905688880285112977572901480973791888259637PR.&lt;x&gt;=PolynomialRing(Zmod(n))f=p_+xa=f.small_roots(X=2^450,beta=0.4)[0]p=p_+aprint(p)# 170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371527964357773254659131885022323526864655742577256932209187678896131068422973326545184343697783650940422950445390573562429093050687 1234p=170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371527964357773254659131885022323526864655742577256932209187678896131068422973326545184343697783650940422950445390573562429093050687q=n//pd=inverse(0x10001,(p-1)*(q-1))print(long_to_bytes(pow(c,d,n))) 方法2其实都差不多 $p+q$可以表示为$p+\\frac{n}{p}=q+\\frac{n}{q}=2hb+2^{900}+z$ 忽略z，有$p+\\frac{n}{p}=q+\\frac{n}{q}\\approx2hb+2^{900}$ 可以直接把p,q的近似值求出来 这里用二分法逼近min{p,q} 12345678910111213141516171819202122from Crypto.Util.number import *import gmpy2n=0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3c=0xd7f6c90512bc9494370c3955ff3136bb245a6d1095e43d8636f66f11db525f2063b14b2a4363a96e6eb1bea1e9b2cc62b0cae7659f18f2b8e41fca557281a1e859e8e6b35bd114655b6bf5e454753653309a794fa52ff2e79433ca4bbeb1ab9a78ec49f49ebee2636abd9dd9b80306ae1b87a86c8012211bda88e6e14c58805feb6721a01481d1a7031eb3333375a81858ff3b58d8837c188ffcb982a631e1a7a603b947a6984bd78516c71cfc737aaba479688d56df2c0952deaf496a4eb3f603a46a90efbe9e82a6aef8cfb23e5fcb938c9049b227b7f15c878bd99b61b6c56db7dfff43cd457429d5dcdb5fe314f1cdf317d0c5202bad6a9770076e9b25b1hb=gmpy2.iroot(n,2)[0]hb=(hb&gt;&gt;900)&lt;&lt;900paq=2*hb+2**900l=1r=int(gmpy2.iroot(n,2)[0])while abs(r-l)&gt;1: m=(r+l)//2 x=m+n//m if x&gt;paq: l=m else: r=mprint(r) 之后把r替换成方法1的p_继续做就行了 Inverseproblem2LLL算法，非最小向量，但在LLL求出的基里 123456789101112131415161718import numpy as npL=[]A=np.loadtxt(r'C:\\Users\\Administrator\\Desktop\\A.txt')A=A*10**18b=np.loadtxt(r'C:\\Users\\Administrator\\Desktop\\b.txt')b=b*10**18a=np.vstack([A.T,b])Lm=np.hstack([a,np.identity(51)])for row in Lm: L.append([int(i) for i in row])print(L) 123456789L=matrix(ZZ,L)r=L.LLL()for i in r: if 0&lt;abs(i[50])&lt;256: s=i[50:]*-1^i[-1] for i in s: if 0&lt;i&lt;128: print(chr(i),end='')","link":"/2022/04/21/CTF-2022-crypto/"},{"title":"Coppersmith算法及其应用","text":"速查LLL算法$$||v_1|| ≤ ||v_2|| ≤ … ≤ ||v_i|| ≤ 2^{\\frac{n(n−1)}{4(n+1−i)}}det(L)^{\\frac{1}{n+1−i}}\\||v_1|| ≤ 2^{\\frac{n−1}{4}}det(L)^{\\frac{1}{n}}$$ CopperSmith算法sage自带1234n=10001P.&lt;x&gt; = PolynomialRing(Zmod(n))f=x^3 + 10*x^2 + 5000*x - 222f.small_roots(X=10) 参数见 sage doc 多元coppersmith脚本脚本参考 coppersmith参数： f 函数 bounds 各变量的上界X组成的元组tuple m 模的幂 d variable shifts（多元时要手动设置为f的项的个数） 定理$$设\\ 0 &lt; \\epsilon &lt; min{0.18, \\frac{1}{d}}.\\ 设\\ F(x)\\ 是模M的d阶首一多项式，且拥有小根x_0，满足\\ |x0| &lt;\\frac{1}{2}M^{1/d−\\epsilon}.\\\\ 则x_0可以在\\ d,\\ \\frac{1}{\\epsilon},\\ log(M)的多项式时间内找到.$$参考 Coppersmith’s Method and Related Applications 算法细节设多项式为$$F(x) = \\sum^d_{i=0} a_ix_i \\in Z[x]$$设$$x_0\\in Z,\\ F(x_0)\\equiv0\\ mod\\ M,\\ |x_0|&lt;X$$把多项式F用一个行向量表示为$$b_F=(a_0,a_1X,a_2X^2,…,a_dX^d)$$ Howgrave-Graham定理$$||b_F||&lt;\\frac{M}{\\sqrt{d+1}}\\Rightarrow F(x_0)=0$$ 证明由Cauchy-Schwarz不等式，有$$(\\sum^n_{i=1}x_iy_i)^2\\le (\\sum^n_{i=1}x_i^2)(\\sum^n_{i=1}y_i^2)\\ and\\ let\\ y_i=1\\Rightarrow \\sum^n_{i=1}x_i\\le \\sqrt{n\\sum^n_{i=1}x_i^2}$$所以$$|F(x_0)|=|\\sum^d_{i=0}a_ix_i|\\le\\sum^d_{i=0}|a_i||x_i|\\le\\sum^d_{i=0}|a_i|X^i\\le\\sqrt{d+1}||b_F||&lt;\\sqrt{d+1}\\frac{M}{\\sqrt{d+1}}=M\\ \\Rightarrow\\ F(x_0)\\in(-M,M)$$所以$$F(x_0)\\equiv 0\\ mod\\ M\\ \\Rightarrow \\ F(x_0)$$考虑这样一个格子$$L=\\begin{pmatrix}M&amp;0&amp;…&amp;0&amp;0\\\\0&amp;MX&amp;…&amp;0&amp;0\\\\\\vdots&amp;&amp;&amp;\\vdots&amp;\\vdots\\\\0&amp;0&amp;\\dots&amp;MX^{d-1}&amp;0\\\\a_0&amp;a_1X&amp;\\dots&amp;d_{d-1}X^{d-1}&amp;X^d\\end{pmatrix}$$格子行向量的线性组合与$F(x_0)\\equiv0\\ mod\\ M$同解，$det(L)=M^dX^\\frac{d(d+1)}{2}$ 运用LLL算法，可以得到约束$$||b_1||\\le2^\\frac{n-1}{4}det(L)^\\frac{1}{n}=2^\\frac{d}{4}M^\\frac{d}{d+1}X^\\frac{d}{2}$$再结合一下Howgrave-Graham定理，有$$2^\\frac{d}{4}M^\\frac{d}{d+1}X^\\frac{d}{2}&lt;\\frac{M}{\\sqrt{d+1}}$$改写一下$$X&lt;c(d)M^\\frac{2}{d(d+1)},\\ c(d)=(d+1)^{-\\frac{1}{d}}2^{-\\frac{1}{2}}$$上界$M^\\frac{2}{d(d+1)}$还是太小了，可以通过x-shift多项式和$F(x)$的幂扩大上界 x-shift多项式：$xF(x), x^2F(x), … , x^kF(x)$ 最终版本$$设\\ 0 &lt; \\epsilon &lt; min{0.18, \\frac{1}{d}}.\\ 设\\ F(x)\\ 是模M的d阶首一多项式，且拥有小根x_0，满足\\ |x0| &lt;\\frac{1}{2}M^{1/d−\\epsilon}.\\\\ 则x_0可以在\\ d,\\ \\frac{1}{\\epsilon}和\\ log(M)的多项式时间内找到.$$ 证明设$h&gt;1$，多项式$G_{i,j}(x) = M^{h−1−j}F(x)^jx^i$对于$ 0 ≤ i &lt; d, 0 ≤ j &lt; h$。 构造格子$$L=\\begin{pmatrix}G_{0,0}(X)\\\\G_{1,0}(X)\\\\\\vdots\\\\G_{d-1,0}(X)\\\\G_{0,1}(X)\\\\\\vdots\\\\G_{d-1,h-1}(X)\\\\\\end{pmatrix}$$该格子为下三角矩阵，对角线的元素为$M^{h−1−j}X^{jd+i}$，所以$$det(L) = M^\\frac{(h−1)hd}{2}X^\\frac{(dh−1)dh}{2}$$附上LLL的最短向量条件$$||b_1||\\le 2^\\frac{dh-1}{2}det(L)^\\frac{1}{dh}=2^\\frac{dh-1}{4}M^\\frac{h-1}{2}X^\\frac{dh-1}{2}$$再附上Howgrave-Graham定理的约束条件$$2^\\frac{dh-1}{4}M^\\frac{h-1}{2}X^\\frac{dh-1}{2}&lt;\\frac{M^{h-1}}{\\sqrt{dh}}$$ $$\\sqrt{dh}2^\\frac{dh−1}{4}X^\\frac{dh−1}{2} &lt; M^\\frac{h−1}{2}$$ 令$c(d,h)=(\\sqrt{dh}2^\\frac{dh−1}{4})^\\frac{2}{dh=1}=\\sqrt{2}(dh)^\\frac{1}{dh−1}$，有$c(d,h)X&lt;M^\\frac{h-1}{dh-1}$ 令$\\epsilon =\\frac{d-1}{d(dh-1)}$，有$\\frac{h-1}{dh-1}=\\frac{1}{d}-\\frac{d-1}{d(dh-1)}=\\frac{1}{d}-\\epsilon,\\ dh=1+\\frac{d-1}{d\\epsilon}$ 所以$c(d,h)=\\sqrt{2}(1+\\frac{d-1}{d\\epsilon})^\\frac{d\\epsilon}{d-1}$$$X&lt;\\frac{1}{2}M^{\\frac{1}{d}-\\epsilon}\\Leftarrow\\frac{1}{2}\\le\\frac{1}{c(d,h)}\\Leftarrow\\frac{d\\epsilon}{d-1}\\in[0,0.18]$$所以$\\epsilon\\le 0.18\\frac{d-1}{d}&lt;0.18$ 注意到，$dh\\approx 1/\\epsilon$，所以当要求更小的$\\epsilon$时，h要更大，也就是要增加格子L的维度，LLL运算量也会相应增大","link":"/2022/03/09/Coppersmith%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/03/08/hello-world/"}],"tags":[{"name":"crypto","slug":"crypto","link":"/tags/crypto/"},{"name":"ctf","slug":"ctf","link":"/tags/ctf/"},{"name":"D^3CTF 2022","slug":"D-3CTF-2022","link":"/tags/D-3CTF-2022/"},{"name":"*CTF 2022","slug":"CTF-2022","link":"/tags/CTF-2022/"},{"name":"note","slug":"note","link":"/tags/note/"}],"categories":[{"name":"CTF","slug":"CTF","link":"/categories/CTF/"}]}
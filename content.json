{"pages":[{"title":"about","text":"一个蒟蒻菜鸡记录笔记的地方，希望也能够帮到你 关于我 ID: Lorlike, L 啥都沾点，啥都不会，目前主要在ctf的密码方向","link":"/about/index.html"}],"posts":[{"title":"2022DASCTF Apr","text":"cryptoeasy_real爆破hash，xor密码 1234567891011121314151617181920212223242526from Crypto.Util.number import *import hashlibfrom pwn import *h='37693cfc748049e45d87b8c7d8b9aacd'n=4197356622576696564490569060686240088884187113566430134461945130770906825187894394672841467350797015940721560434743086405821584185286177962353341322088523c=3298176862697175389935722420143867000970906723110625484802850810634814647827572034913391972640399446415991848730984820839735665233943600223288991148186397for i in range(1,100): if hashlib.md5(str(i).encode()).hexdigest()==h: e=ip = 64310413306776406422334034047152581900365687374336418863191177338901198608319q=n//pd=inverse(e,(p-1)*(q-1))m=pow(c,d,n)m=long_to_bytes(m)l=len(m)for i in range(1,10): a=bytes([i]*l) a=xor(a,m) if b'flag' in a: print(a) special_rsa有原题 https://github.com/drewd314/WolvSec-CTF-2022-Writeups/blob/main/Crypto/RSA%20Frustration/RSA%20Frustration.md 12345678910111213141516171819202122232425from Crypto.Util.number import long_to_bytesfrom sage.all import *e = 113cipher = 1028324919038104683475485759234995158466543298184637219012354053883391759172761125802189697762778242175407876548832454351014064525118465877297277847501477586955680645311999174005606833294172830817159N_list = [1134876149917575363176366704410565158549594427794901202977560677131703617, 68506321231437453734007374706367120760326482177047006099953454136095248103663, 7783503593765446343363083302704731608384677185199537317445372251030064778965500447, 1070135687488356161164202697449500843725645617129661751744246979913699130211505096520493, 84012402115704505952834528733063574032699054524475028392540927197962976150657887637275643641, 4497278582433699034700211877087309784829036823057043402314297478185216205338241432310114079123771, 222438508972972285373674471797570608108219830357859030918870564627162064662598790037437036093579139489, 19116847751264029874551971240684579996570601026679560309305369168779130317938356692609176166515369250878437, 1549903986709797721131070830901667744892392382636347158789834851868638863292232718716074359148785900673192362699, 62387766690725996279968636478698222263235233511074646032501495855928095611796694112573478405813305623307157261619643, 1496134688150941811618178638810353297864345150241986530472328508974364124440160181353848429438725939837967063441528305921, 128744123633657656499069966444992201456797762973822340505291131642660343436783413140023509983315177426811890315424928661125061, 6917342652058596217869122177298094984415751234677039849514181349685079073411591975537016273056773954075238307918266361998553646469, 1999306851167477770905800721615579416365273707414308684419794311809177595829473632853128686208533753019224536487399393397120864878000113, 138594056023048386926766329537127538558164718841925506735112367176642328352257472034381662493666299220910783237918231719166519833124529218331, 8397272388904583425531462714999219642572091279898695377838194583995214737828538895164195817973441184775814069396690436662985593377966417476040659, 83372889332166088651413254885376085265561130214754686361784964744744711092668473281132249352040520639092871294276293287744276919265091479681667169671, 10684953914628370830889219903654707140968094024767031366624595731918523435466123514094659595357231410471738736952266383928737163485550013190959149252435167, 428359134899960532964729749713513106760306719712194950954567619156985067322564731294653991204666853689688900339268764469280769569535109069729404621290809120793, 24491413133428851306933688733518898516890217803647806829002775935975741568422047344206442746983871735723486865901743352102305801200224958166496937663406627341150101, 2247517335600310176909964109060502815240207684510918447209767597511414934626668616704865548059751008841620288545344598917362752622130186820039265603312354963258673860579, 157978379942536176944325875241196121764116712487226808271002140500926678942090491383544034591205964958130852055691446362753906164711087278555153881606839791499207025307202087, 43938571869497484913682975192955012614794498816057204091016374302341854100775132924321569876797699342959191646206571444845883942305710956894334106963321644724361549027630634869933, 2609065298534470914730686454716224905333131812890643378630636043224255484662185236061585264231004975072801053316107165770342161619265243081616632312934742288262985830181883449780965531, 222235907202454132555071455958700740228567465616560859711214102245461514428187391909176054661864893645713338391509536653547350134615807194339839952004333949540567943568810413945779642106201, 44890472824427626252451120059527486677662371033945481542195354255473403815853320591468917295474578271680865394304946847791535710766947049195816261224382109115684638995528332538466194474846836399, 1062789633774349417938788353001516763303743389381120380522262327123099728631034935663418832664265833959487018276693680850987382421521055508477988016246558095545925414048663082368488342633334571240563]p_list = [1189933229053113361422958527792232151, 295185057334340451492588650872876746227, 88380889077762105057154017276462714444697, 43974782968656404951924524450501283426052127, 7832299017937880395583715032476962329929226581, 1656848589754467667368312855929759764100120657831, 385788223643735590500185001710758495904528462058461, 135813272566456906193934636644217527100917542578856697, 41680117092754807988080699273322244961911189757589699867, 9419832152875820180139633405089278278408407453522978357309, 1567597041534155679238655992215022394597376421096298363211067, 350121371461894793578110243222665782247737840410076591434903787, 103424977238409568447978495499643051307907366367259219393937014631, 43449898447639409732732812916430042263570178747794530133229640125923, 12445294229358634680867170058509842935273054334385354032543323581223253, 3200631836176555526009533059891690177091538103904679780020639896015937897, 317277895959173163347650321012213555955385929418622006880521870012130207557, 102366458668689911004027849640392002821642295855327735994412634235696717329671, 26984206512970181742033712455904984758134288864531714209886622060356697128804201, 4479430800690915874719403516331677127806963529247809966024777708496270901092401687, 1328165608715012145707239303399129070657427496129541416861187541092152796676371237057, 368461902207817023013078031477042541053987571003677386333567043030477451518424731838173, 206721456778089912780641186795393376537372828449722520397829606593267585681448641482345737, 59471978701477648587546053450213894562580907285714122639903144859545186463681183925646967041, 15115713372931874518523751684548940147062395364112500028355694776530968944848166318295947674571, 5952590790902091635268726673538951527433355660839816621733964706901441977862333411532558667717227, 1086686910531802445146659484012613083647370307628438760118376029969836222533970554565751069314622539]q_list = [953730950786751671162019537171974567, 232079231415308325450092906880606082069, 88067722275537586769787599991567203589751, 24335212484189159197840692460327461505035059, 10726403821316775206273675267109184566904426261, 2714357008989072105081411295741540337141142641741, 576581905150085393327734090419529952232186498060949, 140758317578347635848563045232314610161039815135897421, 37185691759470013533730603170661686570987787098353146897, 6623023178993627032758350846838617937710601663528839184727, 954412804126450754097808991490470782833291028309980575506163, 367712839396521757736384350030802803477965822058616833553305103, 66882708962198932251728043152245270662769508317424500666902658099, 46014074200352892806829193743016415423205917845271691428043440245531, 11136261905010083405430254612464029672882837025885682392810368001188527, 2623629589005115152329094552749299711026240699896424120660145647226563547, 262775599542220820608778738911414710660835549772895468394761119434220071003, 104379442774418262390337411577160146519860415840398189010112686742489182665577, 15874438801602936764330936047390981280096007684699625987478211613419079727910193, 5467527956822382309398095704409409074818664888285375307055715842283183939297839923, 1692196606246085729483398884059069884182535824953762329164855466589577530953493347747, 428750921047556327595864876619292414694543668237320723518704707914310601565770504401619, 212549643149353357950643557614966235999942509894271006476145929120541407503538644651435909, 43870497594014737833600078975099212558645315030912084285417550950854483979406797450479252891, 14702310219802004876082313481498680940324963613770096574742182597840558294030859405666549879531, 7541333580839789645678699855290145212677767915429008863004397257213367753100058966625356835737037, 978009050697262759337388871320370165458800566798280419667959552859180906066907114053826258140106617]def factorize(p,q,N,depth,cip): assert p * q == N p_roots = mod(cip, p).nth_root(e, all=True) q_roots = mod(cip, q).nth_root(e, all=True) for xp in p_roots: for xq in q_roots: x = crt([Integer(xp), Integer(xq)], [p,q]) x = int(x) flag = long_to_bytes(x) #print(flag) if flag.startswith(b&quot;DAS&quot;): print(flag.decode()) if depth != 26: factorize(p_list[len(p_list) - 1 - (depth + 1)], q_list[len(q_list) - 1 - (depth + 1)], N_list[len(q_list) - 1 - (depth + 1)], (depth + 1), x) if __name__ == &quot;__main__&quot;: factorize(p_list[len(p_list) - 1], q_list[len(q_list)-1], N_list[len(q_list)-1], 0, cipher) CVE OF RSA没时间做，理论上可以用共模攻击 miscSimpleFlowtcp 第52个流有个zip 第50个流分析一下流量得到密码 1a=@eval(@base64_decode($_POST['m8f8d9db647ecd']));&amp;e57fb9c067c677=o3&amp;g479cf6f058cf8=1DY2QgIi9Vc2Vycy9jaGFuZy9TaXRlcy90ZXN0Ijt6aXAgLVAgUGFTc1ppUFdvckQgZmxhZy56aXAgLi4vZmxhZy50eHQ7ZWNobyBbU107cHdkO2VjaG8gW0Vd&amp;m8f8d9db647ecd=QG...... 对字段g479cf6f058cf8从第二位开始base64解码 1cd &quot;/Users/chang/Sites/test&quot;;zip -P PaSsZiPWorD flag.zip ../flag.txt;echo [S];pwd;echo [E] 得到密码PaSsZiPWorD","link":"/2022/04/23/2022DASCTF-Apr/"},{"title":"2022 D^3ctf密码题赛后复现(ing)","text":"d3factor方法1造格子设$\\epsilon=d_2-d_1$，有$e_1e_2\\epsilon +e_2-e_1\\equiv0\\ mod\\ p^6$化为$\\epsilon+b=kp^6,\\ b\\equiv(e_1e_2)^{-1}(e_2-e_1)\\ mod\\ p^6$设$M=N^{\\frac{1}{2}}$，$L=\\begin{pmatrix}M&amp;b\\\\ 0&amp;N\\end{pmatrix}$$(pq\\ -k)L=(pqM\\ -pq\\epsilon)$ 1234567891011121314import gmpy2c = 2420624631315473673388732074340410215657378096737020976722603529598864338532404224879219059105950005655100728361198499550862405660043591919681568611707967N = 1476751427633071977599571983301151063258376731102955975364111147037204614220376883752032253407881568290520059515340434632858734689439268479399482315506043425541162646523388437842149125178447800616137044219916586942207838674001004007237861470176454543718752182312318068466051713087927370670177514666860822341380494154077020472814706123209865769048722380888175401791873273850281384147394075054950169002165357490796510950852631287689747360436384163758289159710264469722036320819123313773301072777844457895388797742631541101152819089150281489897683508400098693808473542212963868834485233858128220055727804326451310080791e1 = 425735006018518321920113858371691046233291394270779139216531379266829453665704656868245884309574741300746121946724344532456337490492263690989727904837374279175606623404025598533405400677329916633307585813849635071097268989906426771864410852556381279117588496262787146588414873723983855041415476840445850171457530977221981125006107741100779529209163446405585696682186452013669643507275620439492021019544922913941472624874102604249376990616323884331293660116156782891935217575308895791623826306100692059131945495084654854521834016181452508329430102813663713333608459898915361745215871305547069325129687311358338082029e2 = 1004512650658647383814190582513307789549094672255033373245432814519573537648997991452158231923692387604945039180687417026069655569594454408690445879849410118502279459189421806132654131287284719070037134752526923855821229397612868419416851456578505341237256609343187666849045678291935806441844686439591365338539029504178066823886051731466788474438373839803448380498800384597878814991008672054436093542513518012957106825842251155935855375353004898840663429274565622024673235081082222394015174831078190299524112112571718817712276118850981261489528540025810396786605197437842655180663611669918785635193552649262904644919b=inverse_mod(e1*e2,N)*(e2-e1)%NM=floor(N^(1/2))A=matrix(ZZ,[[M,b],[0,N]])pq=abs(A.LLL()[0][0])//Mp6=N//pqp=gmpy2.gcd(p6,pq)q=pq//pprint(p,q) 解出flag 12345678910111213from Crypto.Util.number import *from hashlib import md5c = 2420624631315473673388732074340410215657378096737020976722603529598864338532404224879219059105950005655100728361198499550862405660043591919681568611707967p=81911394167511996830305370213894554209992159667974516868378702592733037962549q=59689394622751323780317475130818337618980301243859922297121750335804594909859n=p*qphi=pow(p,6)*(p-1)*(q-1)d=inverse(0x10001,phi)msg=long_to_bytes(pow(c,d,n))flag = 'd3ctf{'+md5(msg).hexdigest()+'}'print(flag) 方法2直接上coppersmith梭$e_1e_2\\epsilon +e_2-e_1\\equiv0\\ mod\\ p^6$$b=p^6\\ge N^\\beta$得到$\\beta=$0.75 12345678910111213141516171819202122import gmpy2from hashlib import md5c = 2420624631315473673388732074340410215657378096737020976722603529598864338532404224879219059105950005655100728361198499550862405660043591919681568611707967N = 1476751427633071977599571983301151063258376731102955975364111147037204614220376883752032253407881568290520059515340434632858734689439268479399482315506043425541162646523388437842149125178447800616137044219916586942207838674001004007237861470176454543718752182312318068466051713087927370670177514666860822341380494154077020472814706123209865769048722380888175401791873273850281384147394075054950169002165357490796510950852631287689747360436384163758289159710264469722036320819123313773301072777844457895388797742631541101152819089150281489897683508400098693808473542212963868834485233858128220055727804326451310080791e1 = 425735006018518321920113858371691046233291394270779139216531379266829453665704656868245884309574741300746121946724344532456337490492263690989727904837374279175606623404025598533405400677329916633307585813849635071097268989906426771864410852556381279117588496262787146588414873723983855041415476840445850171457530977221981125006107741100779529209163446405585696682186452013669643507275620439492021019544922913941472624874102604249376990616323884331293660116156782891935217575308895791623826306100692059131945495084654854521834016181452508329430102813663713333608459898915361745215871305547069325129687311358338082029e2 = 1004512650658647383814190582513307789549094672255033373245432814519573537648997991452158231923692387604945039180687417026069655569594454408690445879849410118502279459189421806132654131287284719070037134752526923855821229397612868419416851456578505341237256609343187666849045678291935806441844686439591365338539029504178066823886051731466788474438373839803448380498800384597878814991008672054436093542513518012957106825842251155935855375353004898840663429274565622024673235081082222394015174831078190299524112112571718817712276118850981261489528540025810396786605197437842655180663611669918785635193552649262904644919P.&lt;x&gt;=PolynomialRing(Zmod(N))f=e1*e2*x+e2-e1f=f.monic()res=f.small_roots(X=2^1000,beta=0.75)[0]p6=gmpy2.gcd(int(f(res)),N)n=N//p6p=gmpy2.gcd(p6,n)q=n//pn=p*qphi=pow(p,6)*(p-1)*(q-1)d=inverse_mod(0x10001,phi)msg=bytes.fromhex(hex(gmpy2.powmod(c,d,n))[2:])print(msg)flag = 'd3ctf{'+md5(msg).hexdigest()+'}'print(flag) d3qcg多元coppersmith$s_1=as^2+c\\ mod\\ p\\ ,\\ s_2=as_1^2+c\\ mod\\ p$$s_1,s_2$高位已知，求出$s_1,s_2$，在有限域求根$s$ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import itertoolsimport hashlibdef small_roots(f, bounds, m=1, d=None): if not d: d = f.degree() R = f.base_ring() N = R.cardinality() f /= f.coefficients().pop(0) f = f.change_ring(ZZ) G = Sequence([], f.parent()) for i in range(m+1): base = N ^ (m-i) * f ^ i for shifts in itertools.product(range(d), repeat=f.nvariables()): g = base * prod(map(power, f.variables(), shifts)) G.append(g) B, monomials = G.coefficient_matrix() monomials = vector(monomials) factors = [monomial(*bounds) for monomial in monomials] for i, factor in enumerate(factors): B.rescale_col(i, factor) B = B.dense_matrix().LLL() B = B.change_ring(QQ) for i, factor in enumerate(factors): B.rescale_col(i, 1/factor) H = Sequence([], f.parent().change_ring(QQ)) for h in filter(None, B*monomials): H.append(h) I = H.ideal() if I.dimension() == -1: H.pop() elif I.dimension() == 0: roots = [] for root in I.variety(ring=ZZ): root = tuple(R(root[var]) for var in f.variables()) roots.append(root) return roots return []d = {'a': 3591518680290719943596137190796366296374484536382380061852237064647969442581391967815457547858969187198898670115651116598727939742165753798804458359397101, 'c': 6996824752943994631802515921125382520044917095172009220000813718617441355767447428067985103926211738826304567400243131010272198095205381950589038817395833, 'p': 7386537185240346459857715381835501419533088465984777861268951891482072249822526223542514664598394978163933836402581547418821954407062640385756448408431347}a, c, p = d['a'], d['c'], d['p']h = [67523583999102391286646648674827012089888650576715333147417362919706349137337570430286202361838682309142789833, 70007105679729967877791601360700732661124470473944792680253826569739619391572400148455527621676313801799318422]enc = 6176615302812247165125832378994890837952704874849571780971393318502417187945089718911116370840334873574762045429920150244413817389304969294624001945527125P. &lt; x, y &gt; = PolynomialRing(GF(p))f = a*(2 ^ 146*h[0]+x) ^ 2+c-(2 ^ 146*h[1]+y)l = small_roots(f, (2 ^ 146, 2 ^ 146), m=4, d=4)assert len(l) &gt; 0l1, l2 = l[0]s1, s2 = 2 ^ 146*h[0]+l1, 2 ^ 146*h[1]+l2P. &lt; z &gt;= PolynomialRing(GF(p))f = a*z ^ 2+c-s1l = [int(i[0]) for i in f.roots()]for i in l: flag = int.from_bytes(hashlib.sha512(b'%d' % (i)).digest(), 'big') ^ ^enc flag = bytes.fromhex(hex(flag)[2:]) if b'd3ctf' in flag: print(flag) 核心代码来自https://github.com/defund/coppersmith d3bug123456789101112131415161718192021222324mask = 0b1010010000001000000010001001010010100100000010000000100010010100A = matrix(GF(2), 70, 64)T1 = matrix(GF(2), 64, 64)T2 = matrix(GF(2), 64, 64)for i in range(63): T1[i, i+1] = 1 T2[i, i+1] = 1T1[-1] = [int(i) for i in bin(mask)[2:]]T2[-1] = [1]*64E1 = T1 ^ 64E2 = T2 ^ 64r1 = '01111101111010111000010010111001101'r2 = '00100110001000110001101010101001001'for i in range(35): A[i] = E1[i] A[i+35] = E2[i]b = [int(i) for i in r1+r2]ans = A.solve_right(b)print(ans)flag = 0for i in ans: flag = (flag &lt;&lt; 1)+int(i)print(bytes.fromhex(hex(flag)[2:]))","link":"/2022/03/08/2022-D3ctf%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/"},{"title":"*CTF 2022 crypto","text":"ezRSA方法1p,q的900位以后的高位hb都是一样的，可以先求出来 设$p=hb+y$，那么$q=hb+2^{900}-y+z$，z为300位的随机数，可以得到$$p+q=2hb+2^{900}+z,\\ p-q=2y-2^{900}-z$$因为$n=pq$，$p+q$的高位（低300位未知）已知，可以由$p-q=\\sqrt{(p+q)^2-4n}$求出$p-q$的近似值相应的y的近似值也能求出，再用coppersmith求出y的低位从而求出p 1234567891011121314151617from Crypto.Util.number import *import gmpy2n=0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3c=0xd7f6c90512bc9494370c3955ff3136bb245a6d1095e43d8636f66f11db525f2063b14b2a4363a96e6eb1bea1e9b2cc62b0cae7659f18f2b8e41fca557281a1e859e8e6b35bd114655b6bf5e454753653309a794fa52ff2e79433ca4bbeb1ab9a78ec49f49ebee2636abd9dd9b80306ae1b87a86c8012211bda88e6e14c58805feb6721a01481d1a7031eb3333375a81858ff3b58d8837c188ffcb982a631e1a7a603b947a6984bd78516c71cfc737aaba479688d56df2c0952deaf496a4eb3f603a46a90efbe9e82a6aef8cfb23e5fcb938c9049b227b7f15c878bd99b61b6c56db7dfff43cd457429d5dcdb5fe314f1cdf317d0c5202bad6a9770076e9b25b1prefix=gmpy2.iroot(n,2)[0]prefix=(prefix&gt;&gt;900)&lt;&lt;900hb=gmpy2.iroot(n,2)[0]hb=(hb&gt;&gt;900)&lt;&lt;900paq=2*hb+2**900psq=gmpy2.iroot(paq**2-4*n,2)[0]y=(psq+2**900)//2p=hb+yprint(p)# 170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371506437683672869879650195774368524468044540434185235653504063937932618450991608706715382905688880285112977572901480973791888259637 1234567891011n=0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3p_=170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371506437683672869879650195774368524468044540434185235653504063937932618450991608706715382905688880285112977572901480973791888259637PR.&lt;x&gt;=PolynomialRing(Zmod(n))f=p_+xa=f.small_roots(X=2^450,beta=0.4)[0]p=p_+aprint(p)# 170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371527964357773254659131885022323526864655742577256932209187678896131068422973326545184343697783650940422950445390573562429093050687 1234p=170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371527964357773254659131885022323526864655742577256932209187678896131068422973326545184343697783650940422950445390573562429093050687q=n//pd=inverse(0x10001,(p-1)*(q-1))print(long_to_bytes(pow(c,d,n))) 方法2其实都差不多 $p+q$可以表示为$p+\\frac{n}{p}=q+\\frac{n}{q}=2hb+2^{900}+z$ 忽略z，有$p+\\frac{n}{p}=q+\\frac{n}{q}\\approx2hb+2^{900}$ 可以直接把p,q的近似值求出来 这里用二分法逼近min{p,q} 12345678910111213141516171819202122from Crypto.Util.number import *import gmpy2n=0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3c=0xd7f6c90512bc9494370c3955ff3136bb245a6d1095e43d8636f66f11db525f2063b14b2a4363a96e6eb1bea1e9b2cc62b0cae7659f18f2b8e41fca557281a1e859e8e6b35bd114655b6bf5e454753653309a794fa52ff2e79433ca4bbeb1ab9a78ec49f49ebee2636abd9dd9b80306ae1b87a86c8012211bda88e6e14c58805feb6721a01481d1a7031eb3333375a81858ff3b58d8837c188ffcb982a631e1a7a603b947a6984bd78516c71cfc737aaba479688d56df2c0952deaf496a4eb3f603a46a90efbe9e82a6aef8cfb23e5fcb938c9049b227b7f15c878bd99b61b6c56db7dfff43cd457429d5dcdb5fe314f1cdf317d0c5202bad6a9770076e9b25b1hb=gmpy2.iroot(n,2)[0]hb=(hb&gt;&gt;900)&lt;&lt;900paq=2*hb+2**900l=1r=int(gmpy2.iroot(n,2)[0])while abs(r-l)&gt;1: m=(r+l)//2 x=m+n//m if x&gt;paq: l=m else: r=mprint(r) 之后把r替换成方法1的p_继续做就行了 Inverseproblem2LLL算法，非最小向量，但在LLL求出的基里 123456789101112131415161718import numpy as npL=[]A=np.loadtxt(r'C:\\Users\\Administrator\\Desktop\\A.txt')A=A*10**18b=np.loadtxt(r'C:\\Users\\Administrator\\Desktop\\b.txt')b=b*10**18a=np.vstack([A.T,b])Lm=np.hstack([a,np.identity(51)])for row in Lm: L.append([int(i) for i in row])print(L) 123456789L=matrix(ZZ,L)r=L.LLL()for i in r: if abs(i[-1])==1: s=i[50:]*(-i[-1]) for i in s: if 0&lt;i&lt;128: print(chr(i),end='')","link":"/2022/04/21/CTF-2022-crypto/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/03/08/hello-world/"},{"title":"Coppersmith算法及其应用","text":"速查LLL算法$$||v_1|| ≤ ||v_2|| ≤ … ≤ ||v_i|| ≤ 2^{\\frac{n(n−1)}{4(n+1−i)}}det(L)^{\\frac{1}{n+1−i}}\\||v_1|| ≤ 2^{\\frac{n−1}{4}}det(L)^{\\frac{1}{n}}$$ CopperSmith算法sage自带1234n=10001P.&lt;x&gt; = PolynomialRing(Zmod(n))f=x^3 + 10*x^2 + 5000*x - 222f.small_roots(X=10) 参数见 sage doc 多元coppersmith脚本脚本参考 coppersmith参数： f 函数 bounds 各变量的上界X组成的元组tuple m 模的幂 d variable shifts（多元时要手动设置为f的项的个数） 定理$$设\\ 0 &lt; \\epsilon &lt; min{0.18, \\frac{1}{d}}.\\ 设\\ F(x)\\ 是模M的d阶首一多项式，且拥有小根x_0，满足\\ |x0| &lt;\\frac{1}{2}M^{1/d−\\epsilon}.\\\\ 则x_0可以在\\ d,\\ \\frac{1}{\\epsilon},\\ log(M)的多项式时间内找到.$$参考 Coppersmith’s Method and Related Applications 算法细节设多项式为$$F(x) = \\sum^d_{i=0} a_ix_i \\in Z[x]$$设$$x_0\\in Z,\\ F(x_0)\\equiv0\\ mod\\ M,\\ |x_0|&lt;X$$把多项式F用一个行向量表示为$$b_F=(a_0,a_1X,a_2X^2,…,a_dX^d)$$ Howgrave-Graham定理$$||b_F||&lt;\\frac{M}{\\sqrt{d+1}}\\Rightarrow F(x_0)=0$$ 证明由Cauchy-Schwarz不等式，有$$(\\sum^n_{i=1}x_iy_i)^2\\le (\\sum^n_{i=1}x_i^2)(\\sum^n_{i=1}y_i^2)\\ and\\ let\\ y_i=1\\Rightarrow \\sum^n_{i=1}x_i\\le \\sqrt{n\\sum^n_{i=1}x_i^2}$$所以$$|F(x_0)|=|\\sum^d_{i=0}a_ix_i|\\le\\sum^d_{i=0}|a_i||x_i|\\le\\sum^d_{i=0}|a_i|X^i\\le\\sqrt{d+1}||b_F||&lt;\\sqrt{d+1}\\frac{M}{\\sqrt{d+1}}=M\\ \\Rightarrow\\ F(x_0)\\in(-M,M)$$所以$$F(x_0)\\equiv 0\\ mod\\ M\\ \\Rightarrow \\ F(x_0)$$考虑这样一个格子$$L=\\begin{pmatrix}M&amp;0&amp;…&amp;0&amp;0\\\\0&amp;MX&amp;…&amp;0&amp;0\\\\\\vdots&amp;&amp;&amp;\\vdots&amp;\\vdots\\\\0&amp;0&amp;\\dots&amp;MX^{d-1}&amp;0\\\\a_0&amp;a_1X&amp;\\dots&amp;d_{d-1}X^{d-1}&amp;X^d\\end{pmatrix}$$格子行向量的线性组合与$F(x_0)\\equiv0\\ mod\\ M$同解，$det(L)=M^dX^\\frac{d(d+1)}{2}$ 运用LLL算法，可以得到约束$$||b_1||\\le2^\\frac{n-1}{4}det(L)^\\frac{1}{n}=2^\\frac{d}{4}M^\\frac{d}{d+1}X^\\frac{d}{2}$$再结合一下Howgrave-Graham定理，有$$2^\\frac{d}{4}M^\\frac{d}{d+1}X^\\frac{d}{2}&lt;\\frac{M}{\\sqrt{d+1}}$$改写一下$$X&lt;c(d)M^\\frac{2}{d(d+1)},\\ c(d)=(d+1)^{-\\frac{1}{d}}2^{-\\frac{1}{2}}$$上界$M^\\frac{2}{d(d+1)}$还是太小了，可以通过x-shift多项式和$F(x)$的幂扩大上界 x-shift多项式：$xF(x), x^2F(x), … , x^kF(x)$ 最终版本$$设\\ 0 &lt; \\epsilon &lt; min{0.18, \\frac{1}{d}}.\\ 设\\ F(x)\\ 是模M的d阶首一多项式，且拥有小根x_0，满足\\ |x0| &lt;\\frac{1}{2}M^{1/d−\\epsilon}.\\\\ 则x_0可以在\\ d,\\ \\frac{1}{\\epsilon}和\\ log(M)的多项式时间内找到.$$ 证明设$h&gt;1$，多项式$G_{i,j}(x) = M^{h−1−j}F(x)^jx^i$对于$ 0 ≤ i &lt; d, 0 ≤ j &lt; h$。 构造格子$$L=\\begin{pmatrix}G_{0,0}(X)\\\\G_{1,0}(X)\\\\\\vdots\\\\G_{d-1,0}(X)\\\\G_{0,1}(X)\\\\\\vdots\\\\G_{d-1,h-1}(X)\\\\\\end{pmatrix}$$该格子为下三角矩阵，对角线的元素为$M^{h−1−j}X^{jd+i}$，所以$$det(L) = M^\\frac{(h−1)hd}{2}X^\\frac{(dh−1)dh}{2}$$附上LLL的最短向量条件$$||b_1||\\le 2^\\frac{dh-1}{2}det(L)^\\frac{1}{dh}=2^\\frac{dh-1}{4}M^\\frac{h-1}{2}X^\\frac{dh-1}{2}$$再附上Howgrave-Graham定理的约束条件$$2^\\frac{dh-1}{4}M^\\frac{h-1}{2}X^\\frac{dh-1}{2}&lt;\\frac{M^{h-1}}{\\sqrt{dh}}$$ $$\\sqrt{dh}2^\\frac{dh−1}{4}X^\\frac{dh−1}{2} &lt; M^\\frac{h−1}{2}$$ 令$c(d,h)=(\\sqrt{dh}2^\\frac{dh−1}{4})^\\frac{2}{dh=1}=\\sqrt{2}(dh)^\\frac{1}{dh−1}$，有$c(d,h)X&lt;M^\\frac{h-1}{dh-1}$ 令$\\epsilon =\\frac{d-1}{d(dh-1)}$，有$\\frac{h-1}{dh-1}=\\frac{1}{d}-\\frac{d-1}{d(dh-1)}=\\frac{1}{d}-\\epsilon,\\ dh=1+\\frac{d-1}{d\\epsilon}$ 所以$c(d,h)=\\sqrt{2}(1+\\frac{d-1}{d\\epsilon})^\\frac{d\\epsilon}{d-1}$$$X&lt;\\frac{1}{2}M^{\\frac{1}{d}-\\epsilon}\\Leftarrow\\frac{1}{2}\\le\\frac{1}{c(d,h)}\\Leftarrow\\frac{d\\epsilon}{d-1}\\in[0,0.18]$$所以$\\epsilon\\le 0.18\\frac{d-1}{d}&lt;0.18$ 注意到，$dh\\approx 1/\\epsilon$，所以当要求更小的$\\epsilon$时，h要更大，也就是要增加格子L的维度，LLL运算量也会相应增大","link":"/2022/03/09/Coppersmith%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"}],"tags":[{"name":"ctf","slug":"ctf","link":"/tags/ctf/"},{"name":"DASCTF","slug":"DASCTF","link":"/tags/DASCTF/"},{"name":"crypto","slug":"crypto","link":"/tags/crypto/"},{"name":"D^3CTF","slug":"D-3CTF","link":"/tags/D-3CTF/"},{"name":"*CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"note","slug":"note","link":"/tags/note/"}],"categories":[{"name":"CTF","slug":"CTF","link":"/categories/CTF/"}]}